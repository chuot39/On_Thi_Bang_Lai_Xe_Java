// Generated by view binder compiler. Do not edit!
package com.example.OnThiBangLaiXe.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.OnThiBangLaiXe.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemDeThiBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final ImageView ivCauDung;

  @NonNull
  public final ImageView ivSai;

  @NonNull
  public final TextView txtDeThi;

  @NonNull
  public final TextView txtSoCauDung;

  @NonNull
  public final TextView txtSoCauSai;

  private ItemDeThiBinding(@NonNull LinearLayout rootView, @NonNull ImageView ivCauDung,
      @NonNull ImageView ivSai, @NonNull TextView txtDeThi, @NonNull TextView txtSoCauDung,
      @NonNull TextView txtSoCauSai) {
    this.rootView = rootView;
    this.ivCauDung = ivCauDung;
    this.ivSai = ivSai;
    this.txtDeThi = txtDeThi;
    this.txtSoCauDung = txtSoCauDung;
    this.txtSoCauSai = txtSoCauSai;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemDeThiBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemDeThiBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_de_thi, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemDeThiBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.ivCauDung;
      ImageView ivCauDung = ViewBindings.findChildViewById(rootView, id);
      if (ivCauDung == null) {
        break missingId;
      }

      id = R.id.ivSai;
      ImageView ivSai = ViewBindings.findChildViewById(rootView, id);
      if (ivSai == null) {
        break missingId;
      }

      id = R.id.txt_DeThi;
      TextView txtDeThi = ViewBindings.findChildViewById(rootView, id);
      if (txtDeThi == null) {
        break missingId;
      }

      id = R.id.txtSoCauDung;
      TextView txtSoCauDung = ViewBindings.findChildViewById(rootView, id);
      if (txtSoCauDung == null) {
        break missingId;
      }

      id = R.id.txtSoCauSai;
      TextView txtSoCauSai = ViewBindings.findChildViewById(rootView, id);
      if (txtSoCauSai == null) {
        break missingId;
      }

      return new ItemDeThiBinding((LinearLayout) rootView, ivCauDung, ivSai, txtDeThi, txtSoCauDung,
          txtSoCauSai);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
